[gd_scene load_steps=16 format=3 uid="uid://cfclydstafutb"]

[ext_resource type="ArrayMesh" uid="uid://ckeg56iapmafr" path="res://models/buildings/warior_camp/mesh.obj" id="1_cl14h"]
[ext_resource type="ArrayMesh" uid="uid://be7rkhv48pfbh" path="res://models/buildings/school_of_magic/mesh.obj" id="3_rqcif"]
[ext_resource type="Texture2D" uid="uid://bdgg2iujj52ck" path="res://icons/currency.png" id="3_uw5c1"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_3cwvj"]
sky_top_color = Color(0.0694699, 0.472068, 0.724387, 1)
sky_horizon_color = Color(0.553228, 0.667132, 0.688781, 1)
sky_energy_multiplier = 2.5
ground_bottom_color = Color(0.143441, 0.196459, 0.0307371, 1)
ground_horizon_color = Color(0.553228, 0.667132, 0.688781, 1)

[sub_resource type="Sky" id="Sky_qlxgp"]
sky_material = SubResource("ProceduralSkyMaterial_3cwvj")

[sub_resource type="Environment" id="Environment_fdxs2"]
background_mode = 2
sky = SubResource("Sky_qlxgp")
tonemap_mode = 2
glow_enabled = true

[sub_resource type="GDScript" id="GDScript_tn7tc"]
script/source = "extends Camera3D;

var state = State.state;
@onready var screen_size = get_viewport().size;


func _input(event):
	if event is InputEventMouseButton:
		zoom(event);

func _process(delta: float): move();

func _physics_process(delta: float) -> void:
	set_raycast_intersect();
	
	
func zoom(event):
	if !event.is_pressed(): return;
	if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
		global_transform.origin += -global_transform.basis.z;
	if event.button_index == MOUSE_BUTTON_WHEEL_UP:
		global_transform.origin += global_transform.basis.z;

func move():
	if !screen_size: return;
	var mouse_position = get_viewport().get_mouse_position();
	if mouse_position.x > -4 and mouse_position.x < 2: position.x -= 1;
	if mouse_position.x > screen_size.x - 2: position.x += 1;
	
	if mouse_position.y > -4 and mouse_position.y < 2: position.z -= 1;
	if mouse_position.y > screen_size.y - 2: position.z += 1;

func set_raycast_intersect():
	var mouse_position = get_viewport().get_mouse_position();
	var length = 1000;
	var from = project_ray_origin(mouse_position);
	var to = from + project_ray_normal(mouse_position) * length;
	var space = get_world_3d().direct_space_state;
	var query = PhysicsRayQueryParameters3D.new()
	query.from = from;
	query.to = to;
	var result = space.intersect_ray(query);
	state.raycast_intersect = result;
	return result;
"

[sub_resource type="GDScript" id="GDScript_jcqmw"]
script/source = "extends Node;

var MeshHelper = preload(\"res://helpers/mesh.gd\");
var state = State.state;
var build_scene = preload(\"res://objects/building/building.tscn\");

func build(building: BuildingResource):
	abort();
	#if build.price <= state.currency: //TODO connect calculation
	var instance = MeshHelper.instantiate_mesh(building.model);
	if instance: 
		var scale = building.build_model_scale;
		instance.scale = Vector3(scale, scale, scale);
		state.selected_build_mesh = instance;
		state.selected_build = building;
		self.add_child(instance);

func abort():
	self.remove_child(state.selected_build_mesh);
	state.selected_build_mesh = null;
	state.selected_build = null;

func _process(delta: float):
	draw_build_on_cursor();

func _input(event: InputEvent):
	if event is InputEventMouse and event.is_pressed() and state.selected_build:
		if event.button_index == 2: abort();
		if event.button_index == 1: spawn(state.selected_build);

func draw_build_on_cursor():
	if !state.selected_build_mesh or !state.raycast_intersect: return;
	state.selected_build_mesh.position = state.raycast_intersect.position;

func spawn(build: BuildingResource):
	var building_node = build_scene.instantiate();
	
	var economic_manager =  %EconomicManager;
	economic_manager.add_income(build.income_weight);
	self.get_parent().add_child(building_node);
	if building_node: 
		building_node.make(build, state.raycast_intersect.position);
	abort();
"

[sub_resource type="GDScript" id="GDScript_71nvp"]
script/source = "extends Node;
var state = State.state;
var button = preload(\"res://components/common/button/button.tscn\");

func _ready() -> void:
	draw_menu();

func draw_menu():
	for index in range(state.buildings.size()):
		var building = state.buildings[index];
		var btn: Button = button.instantiate();
		btn.make(30, building.icon);
		self.add_child(btn);
		btn.custom_minimum_size = Vector2(100, 100);
		btn.pressed.connect(build_signal.bind(building));

func build_signal(building: BuildingResource):
	var node = get_node(\"/root/Game/BuildManager\");
	node.build(building);
"

[sub_resource type="GDScript" id="GDScript_sacbl"]
script/source = "extends RichTextLabel
var state: GameState = State.state;

func _process(delta: float) -> void:
	self.text = str(state.currency);
"

[sub_resource type="BoxMesh" id="BoxMesh_ufyrd"]
size = Vector3(1, 0.1, 1)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_ifckg"]
data = PackedVector3Array(-0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5)

[sub_resource type="GDScript" id="GDScript_qo0fq"]
script/source = "extends Node;

func _input(event: InputEvent):
	if Input.is_action_just_pressed(\"Escape\"):
		DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_WINDOWED);
"

[sub_resource type="GDScript" id="GDScript_h35xh"]
script/source = "extends Node;

var TimeHelper = preload(\"res://helpers/time.gd\");
var state: GameState = State.state;
var resource = preload(\"res://resources/game_process_settings.tres\");
var last_income_time = TimeHelper.time_to_ms(Time.get_time_dict_from_system());

func _ready():
	state.currency = resource.initial_currency;
	state.income_cooldown = resource.income_cooldown;
	state.income = resource.default_income;

func _process(delta: float):
	income()
	
func income():
	var current_time = TimeHelper.time_to_ms(Time.get_time_dict_from_system());
	if (last_income_time + (state.income_cooldown * 1000) - current_time) <= 0:
		state.currency += state.income;
		last_income_time = current_time;

func add_income(value: int):
	state.income += value;
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_ogxwl"]
radius = 2.408
height = 38.332

[node name="Game" type="Node2D"]
position = Vector2(20, 14)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_fdxs2")

[node name="Towers" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -128.016, 5.39145, -0.239136)
mesh = ExtResource("1_cl14h")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.422618, 0.906308, 0, -0.906308, 0.422618, -70.318, 36.054, 23.543)
fov = 99.0
script = SubResource("GDScript_tn7tc")

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(0.999682, 0.0252173, 0, -0.0252173, 0.999682, 0, 0, 0, 1, -38.7003, 26.9599, -0.642187)
visible = false
light_energy = 2.59
omni_range = 4096.0

[node name="BuildManager" type="Node" parent="."]
script = SubResource("GDScript_jcqmw")

[node name="UI" type="CanvasLayer" parent="."]

[node name="MenuContainer" type="GridContainer" parent="UI"]
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -168.0
offset_top = -62.0
offset_right = -18.0
offset_bottom = -12.0
grow_horizontal = 0
grow_vertical = 0
size_flags_horizontal = 0
size_flags_vertical = 0
columns = 3
script = SubResource("GDScript_71nvp")

[node name="CurrencyContainer" type="HSplitContainer" parent="UI"]
custom_minimum_size = Vector2(20, 20)
offset_left = 20.0
offset_top = 14.0
offset_right = 182.0
offset_bottom = 71.0

[node name="RichTextLabel" type="RichTextLabel" parent="UI/CurrencyContainer"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
theme_override_font_sizes/bold_italics_font_size = 40
theme_override_font_sizes/italics_font_size = 40
theme_override_font_sizes/mono_font_size = 40
theme_override_font_sizes/normal_font_size = 40
theme_override_font_sizes/bold_font_size = 40
text = "190"
script = SubResource("GDScript_sacbl")

[node name="TextureRect" type="TextureRect" parent="UI/CurrencyContainer"]
custom_minimum_size = Vector2(50, 50)
layout_mode = 2
size_flags_horizontal = 0
texture = ExtResource("3_uw5c1")
expand_mode = 5

[node name="Terrain" type="StaticBody3D" parent="."]

[node name="Cube" type="MeshInstance3D" parent="Terrain"]
transform = Transform3D(277.366, 0, 0, 0, 1.08138, 0, 0, 0, 152.625, -12.3662, 0, -1.01029)
mesh = SubResource("BoxMesh_ufyrd")
skeleton = NodePath("../..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Terrain"]
transform = Transform3D(277.366, 0, 0, 0, 1.08138, 0, 0, 0, 152.625, -12.3662, 0, -1.01029)
shape = SubResource("ConcavePolygonShape3D_ifckg")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.815128, 0.579281, 0, -0.579281, 0.815128, 3.64693, 35.884, 13.8605)
shadow_enabled = true
directional_shadow_max_distance = 200.0

[node name="Debug" type="Node" parent="."]
script = SubResource("GDScript_qo0fq")

[node name="EconomicManager" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_h35xh")

[node name="EnemyCastle" type="StaticBody3D" parent="." groups=["Building"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 108.066, 0, 0)

[node name="Mesh" type="MeshInstance3D" parent="EnemyCastle"]
transform = Transform3D(0.02, 0, 0, 0, 0.02, 0, 0, 0, 0.02, 0, 0, 0)
mesh = ExtResource("3_rqcif")
skeleton = NodePath("../..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="EnemyCastle"]
shape = SubResource("CapsuleShape3D_ogxwl")
